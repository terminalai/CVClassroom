# IMPORTS
import sys 
sys.path.append("../CVClassroom")

from models import StanfordCarsStudentModel
from models import EfficientNetModel

import keras

# VARIABLES
default_target_img_shape = (224, 224, 3) 

class EfficientNetStudent(StanfordCarsStudentModel, EfficientNetModel):
    
    def __init__(self, save_dir, data_dir, expert_class, mdl_noise = True, n_classes = 196, img_shape = default_target_img_shape):
        
        StanfordCarsStudentModel.__init__(self, expert_class, img_shape)
        EfficientNetModel.__init__(self, save_dir, n_classes, img_shape=img_shape)

        self.train_dataloader, self.valid_dataloader = split_data(data_dir)
    
    def train(self, optimizer='AdamW', loss=..., metrics=..., num_epochs=12, valid_freq=3, callbacks = None, compile_kwargs=..., **fit_kwargs):
        EfficientNetModel.train(self, self.train_dataloader, self.valid_dataloader, optimizer=optimizer, loss=loss, metrics=metrics, num_epochs=num_epochs, valid_freq=valid_freq, callbacks=callbacks, compile_kwargs=compile_kwargs)

    def predict(self, img):
        return EfficientNetModel.predict(self, img)

# FUNCTIONS

def split_data(dir): # TODO: create a function that splits a .csv or list of .csv files into train and valid dataloaders

    pass